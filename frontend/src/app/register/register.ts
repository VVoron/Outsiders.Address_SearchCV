import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { AuthService } from '../auth.service';
import { RouterModule } from '@angular/router';

@Component({
  selector: 'app-register',
  standalone: true,
  imports: [CommonModule, FormsModule, RouterModule],
  templateUrl: './register.html',
  styleUrl: './register.scss'
})
export class RegisterComponent {
  username = '';
  password = '';
  re_password = '';
  errorMessage = '';
  loading = false;

  constructor(private auth: AuthService, private router: Router) {}

  onSubmit() {
    this.errorMessage = '';
    this.loading = true;

    if (this.password !== this.re_password) {
      this.errorMessage = '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç';
      this.loading = false;
      return;
    }

    this.auth.register(this.username, this.password, this.re_password).subscribe({
      next: () => {
        // üëá —Å—Ä–∞–∑—É –ª–æ–≥–∏–Ω–∏–º –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        this.auth.login(this.username, this.password).subscribe({
          next: (res: any) => {
            if (res?.access) {
              localStorage.setItem('access', res.access);
              localStorage.setItem('refresh', res.refresh);

              this.auth.me().subscribe({
                next: (user) => {
                  console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω:', user);
                  this.router.navigate(['/recognition']);
                },
                error: () => {
                  console.error('–¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω');
                  localStorage.clear();
                  this.router.navigate(['/login']);
                }
              });
            }
          },
          error: () => {
            this.errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –≤—Ö–æ–¥–µ';
          }
        });
      },
      error: (err) => {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', err);
        this.errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏';
        this.loading = false;
      }
    });
  }
}
