version: "3.9"

services:
  django:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: django
    env_file: .env
    working_dir: /app
    command: >
     sh -c "python manage.py migrate &&
            python manage.py collectstatic --noinput &&
            gunicorn recognition_backend.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 120"
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
      - .:/app
    depends_on:
      - redis
      - postgres
#      - minio
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_URL=redis://redis:6379/0
    ports:
    - "8000:8000"
    networks:
      - lct
    expose:
      - "8000"
    restart: unless-stopped

  nginx:
    build:
      context: ../nginx
      dockerfile: ../nginx/Dockerfile
    container_name: nginx
    depends_on:
      - django
    ports:
      - "80:80"
    volumes:
      - static_volume:/var/www/static
      - media_volume:/var/www/media
    restart: unless-stopped
    networks:
      - lct

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    env_file: .env
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - lct

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD}"
    restart: unless-stopped
    networks:
      - lct

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery
    env_file: .env
    working_dir: /app
    command: celery -A recognition_backend worker --loglevel=info
    volumes:
      - .:/app
    depends_on:
      - postgres
      - redis
    networks:
      - lct
    restart: unless-stopped

volumes:
  pg_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  lct:
      driver: bridge